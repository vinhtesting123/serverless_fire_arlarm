// K·∫øt n·ªëi t·ªõi MQTT WebSocket endpoint
const WebSocket = require('ws');

const ws = new WebSocket('ws://broker.hivemq.com:8000/mqtt');

// Khi k·∫øt n·ªëi th√†nh c√¥ng
ws.on('open', function open() {
    console.log('ƒê√£ k·∫øt n·ªëi t·ªõi MQTT WebSocket');
    // ƒêƒÉng k√Ω v√†o topic
    ws.send(JSON.stringify({
        "type": "subscribe",
        "topic": "vinh/hello"
    }));
});

// Nh·∫≠n d·ªØ li·ªáu t·ª´ topic
ws.on('message', function incoming(data) {
    console.log('D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:', data);

    const messageData = JSON.parse(data);

    // Ki·ªÉm tra v√† x·ª≠ l√Ω d·ªØ li·ªáu
    const { temperature, smokeLevel } = messageData;

    if (typeof temperature === 'undefined' || typeof smokeLevel === 'undefined') {
        return {
            status: "error",
            message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, vui l√≤ng g·ª≠i ƒë·∫ßy ƒë·ªß th√¥ng tin!"
        };
    }

    if (temperature > 60 || smokeLevel > 80) {
        return {
            status: "warning",
            message: "üî• C·∫£nh b√°o ch√°y! Nhi·ªát ƒë·ªô ho·∫∑c m·ª©c kh√≥i v∆∞·ª£t ng∆∞·ª°ng an to√†n."
        };
    } else {
        return {
            status: "safe",
            message: "‚úÖ M·ªçi th·ª© an to√†n."
        };
    }
});

// N·∫øu c√≥ l·ªói x·∫£y ra
ws.on('error', function error(err) {
    console.log('L·ªói k·∫øt n·ªëi:', err);
});
